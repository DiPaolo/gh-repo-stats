import datetime
import os.path
import pprint
from typing import Dict

import click
import plotly.graph_objects as go
import plotly.io as pio

from gh_repo_stats import config
from gh_repo_stats.core.common import DataType, get_data_type_name


def map_data_type_to_text(data_type: DataType) -> str:
    if data_type == DataType.BYTES:
        return 'bytes'
    elif data_type == DataType.LINES:
        return 'lines of code'

    return map_data_type_to_text(data_type)


def plot_graph_to_file(stats: Dict, data_type: DataType = DataType.LINES, min_percent: float = 1.0,
                       output_dir: str = '.', output_base_name: str = 'github_langs_stats',
                       width: int = 1280, height: int = 720):
    param_name = get_data_type_name(data_type)
    output_filename = f"{output_base_name}_{param_name}_{datetime.datetime.now().strftime('%Y-%m-%d')}.png"
    output_full_abs_filename = os.path.abspath(os.path.join(output_dir, output_filename))
    fig, total_code = _plot_graph_internal(stats, data_type, min_percent)

    fig.write_image(output_full_abs_filename, width=width, height=height)

    click.echo()
    click.echo(f'Statistics for {get_data_type_name(data_type)} has been saved to {output_full_abs_filename}')
    click.echo(f'Total {param_name}: {total_code}')

    return output_full_abs_filename


def plot_graph_to_buffer(stats: Dict, data_type: DataType = DataType.LINES, min_percent: float = 1.0,
                         width: int = 1280, height: int = 720) -> bytes:
    fig, total_code = _plot_graph_internal(stats, data_type, min_percent)

    image_data = pio.to_image(fig, 'png', width, height)
    print(f'PLOT GRAPH: size={width}x{height}')
    return image_data


def _plot_graph_internal(stats: Dict, data_type: DataType, min_percent: float) -> (go.Figure, int):
    param_name = get_data_type_name(data_type)
    lang_stats_for_param = list(
        filter(lambda x: x, [(k, v[param_name]) if param_name in v else None for k, v in stats.items()]))
    sorted_lang_stats = sorted(lang_stats_for_param, key=lambda x: x[1])
    total_code_bytes = sum(code_bytes for lang, code_bytes in sorted_lang_stats)

    min_abs_value = total_code_bytes * min_percent / 100.0
    sorted_lang_stats = list(filter(lambda x: x if x[1] >= min_abs_value else None, sorted_lang_stats))

    fig = go.Figure(
        go.Bar(
            # x=[code_bytes * 100.0 / total_code_bytes for lang, code_bytes in sorted_lang_stats],
            x=[code_bytes for lang, code_bytes in sorted_lang_stats],
            y=[lang for lang, code_bytes in sorted_lang_stats],
            marker=dict(
                color='rgba(50, 171, 96, 0.6)',
                line=dict(
                    color='rgba(50, 171, 96, 1.0)',
                    width=1),
            ),
            orientation='h',
            texttemplate='%{x}',
        ),
        layout_title_text=f'Most used languages ({map_data_type_to_text(data_type)})',
        layout_title_font_size=36
    )

    y_s = [round(code_bytes * 100.0 / total_code_bytes, 1) for lang, code_bytes in sorted_lang_stats]
    x = [lang for lang, code_bytes in sorted_lang_stats]

    annotations = []

    # Adding labels
    for yd, xd in zip(y_s, x):
        annotations.append(dict(xref='x1', yref='y1',
                                # x=-200, y=-100,
                                y=xd, x=min(100, 100),
                                text=f'{yd} %',
                                font=dict(family='Arial', size=12,
                                          color='rgb(69, 75, 27)'),
                                showarrow=False))
    # Source
    annotations.append(dict(xref='paper', yref='paper',
                            x=0, y=-0.109,
                            text='Generated by gh-repo-stats (https://github.com/DiPaolo/gh-repo-stats)',
                            font=dict(size=16, color='rgb(150,150,150)'),
                            showarrow=False))

    fig.update_layout(annotations=annotations)

    total_code = sum(code_bytes for lang, code_bytes in sorted_lang_stats)

    if config.DEBUG:
        pprint.pprint(sorted_lang_stats)
        for lang, code in sorted_lang_stats:
            click.echo(f'  {lang} - {code} ({code * 100.0 / total_code :4.2f}%)')

    return fig, total_code
